#!/usr/bin/env ruby

#
# Copyright 2011, Boundary
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This is a munin plugin for the folsom _statistics and _memory resources.
#
# _system resource tracking is disabled since it is mostly static data about the
# vm itself and not running statistics. If it proves useful to have it in munin
# in the future it shouldn't be hard to had the appropriate stats to this plugin.
#

require 'rubygems'
require 'rest_client'
require 'json'

DEFAULT_PORT = "5565"

if ENV['port']
  BASE_URL = "http://localhost:#{ENV['port']}"
else
  BASE_URL = "http://localhost:#{DEFAULT_PORT}"
end

if ENV['multiapp'] == "true"
  __FILE__[/folsom_erlang_(.*)_(.*)/]
  METRIC = $2
  NAME = "#{$2} - #{$1}"
else
  __FILE__[/folsom_erlang_(.*)/]
  METRIC = $1
  NAME = $1
end

def main
  metric = JSON.parse(RestClient.get("#{BASE_URL}/_#{METRIC}"))

  if ARGV[0] == "config"
    puts 'graph_category Folsom'
    puts "graph_title Erlang #{NAME}"
    puts 'graph_vlabel value'

    case METRIC
    when "system"
      puts "#{METRIC}_global_heaps_size.label global_heaps_size"
      puts "#{METRIC}_logical_processors.label logical_processors"
      puts "#{METRIC}_logical_processors_online.label logical_processors_online"
      puts "#{METRIC}_process_count.label process_count"
      puts "#{METRIC}_schedulers.label schedulers"
      puts "#{METRIC}_schedulers_online.label schedulers_online"
      puts "#{METRIC}_thread_pool_size.label thread_pool_size"
      puts "#{METRIC}_wordsize.label wordsize"
    when "statistics"
      puts "#{METRIC}_context_switches.type COUNTER"
      puts "#{METRIC}_context_switches.label context_switches"
      puts "#{METRIC}_run_queue.label run_queue"

      metric["garbage_collection"].keys.each do |key|
        puts "#{METRIC}_#{key}.type COUNTER"
        puts "#{METRIC}_#{key}.label #{key}"
      end

      metric["io"].keys.each do |key|
        puts "#{METRIC}_#{key}.type COUNTER"
        puts "#{METRIC}_#{key}.label #{key}"
      end

      metric["reductions"].keys.each do |key|
        puts "#{METRIC}_#{key}.type COUNTER"
        puts "#{METRIC}_#{key}.label #{key}"
      end

      puts "#{METRIC}_wall_clock_time_since_last_call.label wall_clock_time_since_last_call"

    when "memory"
      metric.keys.each do |key|
        puts "#{METRIC}_#{key}.label #{key}"
      end
    end

  else

    case METRIC
    when "system"
      puts "#{METRIC}_global_heaps_size.value #{metric["global_heaps_size"]}"
      puts "#{METRIC}_logical_processors.value #{metric["logical_processors"]}"
      puts "#{METRIC}_logical_processors_online.value #{metric["logical_processors_online"]}"
      puts "#{METRIC}_process_count.value #{metric["process_count"]}"
      puts "#{METRIC}_schedulers.value #{metric["schedulers"]}"
      puts "#{METRIC}_schedulers_online.value #{metric["schedulers_online"]}"
      puts "#{METRIC}_thread_pool_size.value #{metric["thread_pool_size"]}"
      puts "#{METRIC}_wordsize.value #{metric["wordsize"]}"
    when "statistics"
      puts "#{METRIC}_context_switches.value #{metric["context_switches"]}"
      puts "#{METRIC}_run_queue.value #{metric["run_queue"]}"

      metric["garbage_collection"].each do |key, value|
        puts "#{METRIC}_#{key}.value #{value}"
      end

      metric["io"].each do |key, value|
        puts "#{METRIC}_#{key}.value #{value}"
      end

      metric["reductions"].each do |key, value|
        puts "#{METRIC}_#{key}.value #{value}"
      end

      puts "#{METRIC}_wall_clock_time_since_last_call.value #{metric["wall_clock"]["wall_clock_time_since_last_call"]}"
    when "memory"
      metric.each do |key, value|
        puts "#{METRIC}_#{key}.value #{value}"
      end
    end

  end

end

main
